// Code generated by MockGen. DO NOT EDIT.
// Source: book_stealer_tgbot/internal/service/bookStealerService (interfaces: BooksParser)
//
// Generated by this command:
//
//	mockgen -destination=mocks/booksParser.go -package=mocks . BooksParser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "book_stealer_tgbot/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBooksParser is a mock of BooksParser interface.
type MockBooksParser struct {
	ctrl     *gomock.Controller
	recorder *MockBooksParserMockRecorder
	isgomock struct{}
}

// MockBooksParserMockRecorder is the mock recorder for MockBooksParser.
type MockBooksParserMockRecorder struct {
	mock *MockBooksParser
}

// NewMockBooksParser creates a new mock instance.
func NewMockBooksParser(ctrl *gomock.Controller) *MockBooksParser {
	mock := &MockBooksParser{ctrl: ctrl}
	mock.recorder = &MockBooksParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksParser) EXPECT() *MockBooksParserMockRecorder {
	return m.recorder
}

// GetBooksPaginated mocks base method.
func (m *MockBooksParser) GetBooksPaginated(ctx context.Context, bookTitle, author string, limit, offset int) ([]model.BookPreview, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksPaginated", ctx, bookTitle, author, limit, offset)
	ret0, _ := ret[0].([]model.BookPreview)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBooksPaginated indicates an expected call of GetBooksPaginated.
func (mr *MockBooksParserMockRecorder) GetBooksPaginated(ctx, bookTitle, author, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksPaginated", reflect.TypeOf((*MockBooksParser)(nil).GetBooksPaginated), ctx, bookTitle, author, limit, offset)
}

// ParseBookPage mocks base method.
func (m *MockBooksParser) ParseBookPage(ctx context.Context, ref string) (model.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseBookPage", ctx, ref)
	ret0, _ := ret[0].(model.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseBookPage indicates an expected call of ParseBookPage.
func (mr *MockBooksParserMockRecorder) ParseBookPage(ctx, ref any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseBookPage", reflect.TypeOf((*MockBooksParser)(nil).ParseBookPage), ctx, ref)
}
