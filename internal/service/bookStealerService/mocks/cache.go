// Code generated by MockGen. DO NOT EDIT.
// Source: book_stealer_tgbot/internal/service/bookStealerService (interfaces: Cache)
//
// Generated by this command:
//
//	mockgen -destination=mocks/cache.go -package=mocks . Cache
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "book_stealer_tgbot/internal/model"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// GetBooksForPage mocks base method.
func (m *MockCache) GetBooksForPage(ctx context.Context, title, author string, page int) (model.BooksPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksForPage", ctx, title, author, page)
	ret0, _ := ret[0].(model.BooksPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksForPage indicates an expected call of GetBooksForPage.
func (mr *MockCacheMockRecorder) GetBooksForPage(ctx, title, author, page any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksForPage", reflect.TypeOf((*MockCache)(nil).GetBooksForPage), ctx, title, author, page)
}

// SetBooksForPage mocks base method.
func (m *MockCache) SetBooksForPage(ctx context.Context, booksPage model.BooksPage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBooksForPage", ctx, booksPage)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBooksForPage indicates an expected call of SetBooksForPage.
func (mr *MockCacheMockRecorder) SetBooksForPage(ctx, booksPage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBooksForPage", reflect.TypeOf((*MockCache)(nil).SetBooksForPage), ctx, booksPage)
}
