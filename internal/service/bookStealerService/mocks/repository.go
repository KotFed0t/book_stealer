// Code generated by MockGen. DO NOT EDIT.
// Source: book_stealer_tgbot/internal/service/bookStealerService (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=mocks/repository.go -package=mocks . Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// DeleteEmailByChatId mocks base method.
func (m *MockRepository) DeleteEmailByChatId(ctx context.Context, chatId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEmailByChatId", ctx, chatId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEmailByChatId indicates an expected call of DeleteEmailByChatId.
func (mr *MockRepositoryMockRecorder) DeleteEmailByChatId(ctx, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEmailByChatId", reflect.TypeOf((*MockRepository)(nil).DeleteEmailByChatId), ctx, chatId)
}

// GetEmailByChatId mocks base method.
func (m *MockRepository) GetEmailByChatId(ctx context.Context, chatId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByChatId", ctx, chatId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByChatId indicates an expected call of GetEmailByChatId.
func (mr *MockRepositoryMockRecorder) GetEmailByChatId(ctx, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByChatId", reflect.TypeOf((*MockRepository)(nil).GetEmailByChatId), ctx, chatId)
}

// UpsertEmail mocks base method.
func (m *MockRepository) UpsertEmail(ctx context.Context, chatId int64, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEmail", ctx, chatId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertEmail indicates an expected call of UpsertEmail.
func (mr *MockRepositoryMockRecorder) UpsertEmail(ctx, chatId, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEmail", reflect.TypeOf((*MockRepository)(nil).UpsertEmail), ctx, chatId, email)
}
