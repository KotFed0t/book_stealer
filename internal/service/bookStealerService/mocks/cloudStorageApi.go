// Code generated by MockGen. DO NOT EDIT.
// Source: book_stealer_tgbot/internal/service/bookStealerService (interfaces: CloudStorageApi)
//
// Generated by this command:
//
//	mockgen -destination=mocks/cloudStorageApi.go -package=mocks . CloudStorageApi
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCloudStorageApi is a mock of CloudStorageApi interface.
type MockCloudStorageApi struct {
	ctrl     *gomock.Controller
	recorder *MockCloudStorageApiMockRecorder
	isgomock struct{}
}

// MockCloudStorageApiMockRecorder is the mock recorder for MockCloudStorageApi.
type MockCloudStorageApiMockRecorder struct {
	mock *MockCloudStorageApi
}

// NewMockCloudStorageApi creates a new mock instance.
func NewMockCloudStorageApi(ctrl *gomock.Controller) *MockCloudStorageApi {
	mock := &MockCloudStorageApi{ctrl: ctrl}
	mock.recorder = &MockCloudStorageApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudStorageApi) EXPECT() *MockCloudStorageApiMockRecorder {
	return m.recorder
}

// UploadFile mocks base method.
func (m *MockCloudStorageApi) UploadFile(ctx context.Context, reader io.Reader, filename string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", ctx, reader, filename)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockCloudStorageApiMockRecorder) UploadFile(ctx, reader, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockCloudStorageApi)(nil).UploadFile), ctx, reader, filename)
}
