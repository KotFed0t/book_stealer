// Code generated by MockGen. DO NOT EDIT.
// Source: book_stealer_tgbot/internal/service/bookStealerService (interfaces: FileDownloader)
//
// Generated by this command:
//
//	mockgen -destination=mocks/fileDownloader.go -package=mocks . FileDownloader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileDownloader is a mock of FileDownloader interface.
type MockFileDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockFileDownloaderMockRecorder
	isgomock struct{}
}

// MockFileDownloaderMockRecorder is the mock recorder for MockFileDownloader.
type MockFileDownloaderMockRecorder struct {
	mock *MockFileDownloader
}

// NewMockFileDownloader creates a new mock instance.
func NewMockFileDownloader(ctrl *gomock.Controller) *MockFileDownloader {
	mock := &MockFileDownloader{ctrl: ctrl}
	mock.recorder = &MockFileDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileDownloader) EXPECT() *MockFileDownloaderMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockFileDownloader) Download(ctx context.Context, url string) ([]byte, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Download indicates an expected call of Download.
func (mr *MockFileDownloaderMockRecorder) Download(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockFileDownloader)(nil).Download), ctx, url)
}
